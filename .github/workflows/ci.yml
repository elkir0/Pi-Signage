name: PiSignage CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: [8.1, 8.2]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
    
    - name: Validate shell scripts
      run: |
        find . -name "*.sh" -exec shellcheck {} \; || true
    
    - name: Test installation scripts
      run: |
        chmod +x tests/run-tests.sh
        ./tests/run-tests.sh
    
    - name: Validate web interface
      run: |
        cd web
        php -l index.php
        php -l api/endpoints.php

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker-compose build
    
    - name: Test Docker deployment
      run: |
        docker-compose up -d
        sleep 30
        curl -f http://localhost:8080 || exit 1
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan.sarif'
      continue-on-error: true

  release:
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create release archive
      run: |
        tar -czf pisignage-${{ github.event.release.tag_name }}.tar.gz \
          --exclude='.git' \
          --exclude='logs/*' \
          --exclude='media/temp/*' \
          .
    
    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./pisignage-${{ github.event.release.tag_name }}.tar.gz
        asset_name: pisignage-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip