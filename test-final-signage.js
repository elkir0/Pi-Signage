const puppeteer = require('puppeteer');

(async () => {
  console.log('üß™ Test Final PiSignage Production - 192.168.1.103');
  console.log('=============================================\n');

  const browser = await puppeteer.launch({ headless: 'new' });
  const page = await browser.newPage();

  // Test 1: Interface principale
  console.log('üìä Test 1: Interface Web PiSignage');
  await page.goto('http://192.168.1.103', { waitUntil: 'networkidle0' });

  const title = await page.title();
  console.log(`‚úÖ Titre: "${title}"`);

  // Test 2: API Screenshot
  console.log('\nüì∏ Test 2: API Screenshot');
  const screenshotResponse = await page.evaluate(async () => {
    const response = await fetch('/api/screenshot-simple.php?action=capture');
    return response.json();
  });

  if (screenshotResponse.success) {
    console.log(`‚úÖ Capture r√©ussie avec ${screenshotResponse.data.method}`);
    console.log(`   URL: ${screenshotResponse.data.url}`);
    console.log(`   Taille: ${screenshotResponse.data.size} bytes`);
  } else {
    console.log(`‚ùå √âchec capture: ${screenshotResponse.message}`);
  }

  // Test 3: V√©rifier VLC
  console.log('\nüé¨ Test 3: VLC et Interface Graphique');
  const { execSync } = require('child_process');

  try {
    const vlcStatus = execSync("sshpass -p 'raspberry' ssh pi@192.168.1.103 'ps aux | grep vlc | grep -v grep'").toString();
    if (vlcStatus.includes('vlc')) {
      console.log('‚úÖ VLC en cours d\'ex√©cution');
    } else {
      console.log('‚ùå VLC n\'est pas en cours d\'ex√©cution');
    }
  } catch (e) {
    console.log('‚ö†Ô∏è Impossible de v√©rifier VLC');
  }

  try {
    const x11Status = execSync("sshpass -p 'raspberry' ssh pi@192.168.1.103 'ps aux | grep -E \"(Xorg|lightdm)\" | grep -v grep'").toString();
    if (x11Status.includes('Xorg') || x11Status.includes('lightdm')) {
      console.log('‚úÖ Interface graphique (X11/LightDM) active');
    } else {
      console.log('‚ùå Pas d\'interface graphique d√©tect√©e');
    }
  } catch (e) {
    console.log('‚ö†Ô∏è Impossible de v√©rifier l\'interface graphique');
  }

  // Test 4: Test bouton capture dans l'interface
  console.log('\nüñ±Ô∏è Test 4: Bouton Capture dans Interface');

  // Naviguer vers l'onglet screenshot
  await page.evaluate(() => {
    const screenshotTab = Array.from(document.querySelectorAll('.nav-tab')).find(tab => tab.textContent.includes('Capture'));
    if (screenshotTab) screenshotTab.click();
  });

  await page.waitForTimeout(1000);

  // Cliquer sur le bouton de capture
  const captureButton = await page.$('button[onclick="takeScreenshot()"]');
  if (captureButton) {
    await captureButton.click();
    console.log('‚úÖ Bouton capture trouv√© et cliqu√©');

    // Attendre la capture
    await page.waitForTimeout(3000);

    // V√©rifier si l'image est affich√©e
    const screenshotDisplayed = await page.evaluate(() => {
      const img = document.getElementById('screenshot-display');
      return img && img.style.display !== 'none' && img.src !== '';
    });

    if (screenshotDisplayed) {
      console.log('‚úÖ Capture affich√©e dans l\'interface');
    } else {
      console.log('‚ùå Capture non affich√©e');
    }
  } else {
    console.log('‚ùå Bouton capture non trouv√©');
  }

  // Capture finale de l'interface
  await page.screenshot({ path: 'pisignage-final-test.png' });
  console.log('\nüì∏ Screenshot final: pisignage-final-test.png');

  console.log('\n‚ú® Tests termin√©s!');
  console.log('=====================================');

  await browser.close();
})();