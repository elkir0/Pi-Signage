#!/bin/bash

# SCRIPT DE DIAGNOSTIC COMPLET - PERFORMANCE VID√âO
# Identifie la plateforme et les capacit√©s pour optimiser la lecture vid√©o
# Bas√© sur recherche exhaustive des meilleures pratiques

echo "üîç DIAGNOSTIC COMPLET - PERFORMANCE VID√âO"
echo "========================================"
echo "Date: $(date)"
echo

# ============================================================================
# 1. IDENTIFICATION PLATEFORME
# ============================================================================

echo "üì± IDENTIFICATION PLATEFORME:"
ARCH=$(uname -m)
OS_INFO=$(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)
KERNEL=$(uname -r)

echo "Architecture: $ARCH"
echo "OS: $OS_INFO"
echo "Kernel: $KERNEL"

IS_RASPBERRY_PI=false
IS_ARM=false
IS_X86=false
GPU_TYPE="unknown"

case "$ARCH" in
    armv7l|aarch64)
        IS_ARM=true
        if [ -f /proc/device-tree/model ]; then
            PI_MODEL=$(cat /proc/device-tree/model 2>/dev/null)
            if [[ "$PI_MODEL" == *"Raspberry Pi"* ]]; then
                IS_RASPBERRY_PI=true
                echo "Type: Raspberry Pi ($PI_MODEL)"
                GPU_TYPE="videocore"
            else
                echo "Type: ARM board (non-Pi)"
                GPU_TYPE="arm_generic"
            fi
        else
            echo "Type: ARM architecture"
            GPU_TYPE="arm_generic"
        fi
        ;;
    x86_64)
        IS_X86=true
        echo "Type: x86_64 PC"
        # D√©tecter le GPU
        if lspci | grep -i nvidia > /dev/null; then
            GPU_TYPE="nvidia"
        elif lspci | grep -i amd > /dev/null; then
            GPU_TYPE="amd"
        elif lspci | grep -i intel > /dev/null; then
            GPU_TYPE="intel"
        else
            GPU_TYPE="generic"
        fi
        echo "GPU d√©tect√©: $GPU_TYPE"
        ;;
    *)
        echo "Type: Architecture non reconnue"
        ;;
esac

echo

# ============================================================================
# 2. CAPACIT√âS MAT√âRIELLES
# ============================================================================

echo "üîß CAPACIT√âS MAT√âRIELLES:"

# M√©moire
TOTAL_RAM=$(free -h | grep "Mem:" | awk '{print $2}')
echo "RAM totale: $TOTAL_RAM"

# CPU
CPU_CORES=$(nproc)
CPU_INFO=$(cat /proc/cpuinfo | grep "model name" | head -1 | cut -d':' -f2 | xargs)
echo "CPU: $CPU_CORES cores - $CPU_INFO"

# GPU pour Raspberry Pi
if [ "$IS_RASPBERRY_PI" = true ]; then
    if command -v vcgencmd > /dev/null; then
        GPU_MEM=$(vcgencmd get_mem gpu 2>/dev/null | cut -d'=' -f2)
        GPU_TEMP=$(vcgencmd measure_temp 2>/dev/null | cut -d'=' -f2)
        echo "GPU M√©moire: $GPU_MEM"
        echo "GPU Temp√©rature: $GPU_TEMP"
    fi
fi

# D√©codeurs mat√©riels disponibles
echo
echo "üé¨ D√âCODEURS MAT√âRIELS DISPONIBLES:"

# V4L2 M2M (Linux g√©n√©rique)
V4L2_DEVICES=$(ls /dev/video* 2>/dev/null | wc -l)
if [ $V4L2_DEVICES -gt 0 ]; then
    echo "‚úÖ V4L2 M2M: $V4L2_DEVICES p√©riph√©riques d√©tect√©s"
    ls -la /dev/video* 2>/dev/null | head -3
else
    echo "‚ùå V4L2 M2M: Aucun p√©riph√©rique d√©tect√©"
fi

# VAAPI (Intel/AMD)
if command -v vainfo > /dev/null; then
    echo "‚úÖ VAAPI: Disponible"
    vainfo 2>/dev/null | grep -E "(VAProfile|VAEntrypoint)" | head -3
else
    echo "‚ùå VAAPI: Non disponible"
fi

# NVENC/NVDEC (NVIDIA)
if command -v nvidia-smi > /dev/null; then
    echo "‚úÖ NVIDIA: Disponible"
    nvidia-smi --query-gpu=name,driver_version --format=csv,noheader 2>/dev/null | head -1
else
    echo "‚ùå NVIDIA: Non disponible"
fi

# OpenMAX (Raspberry Pi legacy)
if [ -f /opt/vc/bin/vcgencmd ]; then
    echo "‚úÖ OpenMAX IL: Disponible (legacy Pi)"
else
    echo "‚ùå OpenMAX IL: Non disponible"
fi

echo

# ============================================================================
# 3. LOGICIELS INSTALL√âS
# ============================================================================

echo "üíø LOGICIELS INSTALL√âS:"

# Players vid√©o
declare -A PLAYERS=(
    ["ffmpeg"]="FFmpeg"
    ["vlc"]="VLC"
    ["mpv"]="MPV"
    ["mplayer"]="MPlayer"
    ["omxplayer"]="OMXPlayer"
    ["kodi"]="Kodi"
)

for cmd in "${!PLAYERS[@]}"; do
    if command -v $cmd > /dev/null; then
        version=$($cmd --version 2>/dev/null | head -1 | cut -d' ' -f1-3)
        echo "‚úÖ ${PLAYERS[$cmd]}: $version"
    else
        echo "‚ùå ${PLAYERS[$cmd]}: Non install√©"
    fi
done

echo

# ============================================================================
# 4. CONFIGURATION SYST√àME
# ============================================================================

echo "‚öôÔ∏è CONFIGURATION SYST√àME:"

# Framebuffer
if [ -e /dev/fb0 ]; then
    FB_SIZE=$(cat /sys/class/graphics/fb0/virtual_size 2>/dev/null)
    echo "‚úÖ Framebuffer: $FB_SIZE"
else
    echo "‚ùå Framebuffer: Non disponible"
fi

# Display
if [ -n "$DISPLAY" ]; then
    echo "‚úÖ X11 Display: $DISPLAY"
    if command -v xrandr > /dev/null; then
        RESOLUTION=$(xrandr | grep '\*' | awk '{print $1}' | head -1)
        echo "   R√©solution: $RESOLUTION"
    fi
else
    echo "‚ùå X11 Display: Non disponible"
fi

# Wayland
if [ -n "$WAYLAND_DISPLAY" ]; then
    echo "‚úÖ Wayland: $WAYLAND_DISPLAY"
else
    echo "‚ùå Wayland: Non d√©tect√©"
fi

echo

# ============================================================================
# 5. TESTS DE PERFORMANCE
# ============================================================================

echo "üöÄ TESTS DE PERFORMANCE:"

# Test fichier vid√©o
TEST_VIDEO="/opt/pisignage/media/sintel.mp4"
if [ -f "$TEST_VIDEO" ]; then
    echo "‚úÖ Fichier test: $TEST_VIDEO"
    
    # Analyser le codec
    if command -v ffprobe > /dev/null; then
        CODEC=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=codec_name -of csv=p=0 "$TEST_VIDEO" 2>/dev/null)
        RESOLUTION=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=width,height -of csv=p=0 "$TEST_VIDEO" 2>/dev/null)
        FRAMERATE=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=r_frame_rate -of csv=p=0 "$TEST_VIDEO" 2>/dev/null)
        
        echo "   Codec: $CODEC"
        echo "   R√©solution: $RESOLUTION"
        echo "   Framerate: $FRAMERATE"
    fi
else
    echo "‚ùå Fichier test: Non trouv√©"
fi

echo

# ============================================================================
# 6. RECOMMANDATIONS BAS√âES SUR LA PLATEFORME
# ============================================================================

echo "üí° RECOMMANDATIONS OPTIMALES:"

if [ "$IS_RASPBERRY_PI" = true ]; then
    echo "ü•ß RASPBERRY PI D√âTECT√â:"
    echo "   1. OMXPlayer (32-bit OS) - 0-3% CPU, H264 uniquement"
    echo "   2. VLC fullscreen + MMAL - 10-15% CPU, formats universels"
    echo "   3. Kodi/LibreELEC - Performance optimale pour media center"
    echo
    echo "   Commandes recommand√©es:"
    echo "   - gpu_mem=256 dans /boot/config.txt"
    echo "   - dtoverlay=vc4-fkms-v3d"
    echo "   - omxplayer --hw video.mp4"
    echo "   - vlc --vout=mmal_xsplitter video.mp4"
    
elif [ "$IS_ARM" = true ]; then
    echo "üîß ARM BOARD D√âTECT√â:"
    echo "   1. FFmpeg + h264_v4l2m2m - Si d√©codeur mat√©riel disponible"
    echo "   2. MPV + hardware decoding - Bon compromis performance/qualit√©"
    echo "   3. VLC - Compatibilit√© universelle"
    
elif [ "$IS_X86" = true ]; then
    echo "üíª PC X86_64 D√âTECT√â:"
    echo "   1. FFmpeg + acc√©l√©ration mat√©rielle selon GPU:"
    case "$GPU_TYPE" in
        "nvidia")
            echo "      - ffmpeg -hwaccel cuda -c:v h264_cuvid"
            echo "      - ffplay -vcodec h264_cuvid"
            ;;
        "intel")
            echo "      - ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128"
            echo "      - mpv --hwdec=vaapi"
            ;;
        "amd")
            echo "      - ffmpeg -hwaccel vaapi"
            echo "      - mpv --hwdec=vaapi"
            ;;
        *)
            echo "      - ffmpeg optimis√© software avec threads multiples"
            echo "      - mpv avec d√©codage CPU optimis√©"
            ;;
    esac
    echo "   2. VLC avec acc√©l√©ration mat√©rielle auto-d√©tect√©e"
    echo "   3. MPV - Meilleur player moderne pour Linux desktop"
fi

echo

# ============================================================================
# 7. D√âTECTION CAUSES DU PROBL√àME 3 FPS
# ============================================================================

echo "üêõ DIAGNOSTIC PROBL√àME 3 FPS:"

# V√©rifications communes
echo "Causes possibles identifi√©es:"

# 1. Format pixel incorrect
echo "‚ùó Format pixel: V√©rifier bgra vs rgb565le pour framebuffer"

# 2. Pas d'acc√©l√©ration mat√©rielle
if [ $V4L2_DEVICES -eq 0 ] && [ "$GPU_TYPE" = "unknown" ]; then
    echo "‚ùó Acc√©l√©ration mat√©rielle: Aucune d√©tect√©e"
fi

# 3. R√©solution incorrecte
if [ -e /dev/fb0 ]; then
    echo "‚ùó R√©solution: V√©rifier scale filter correspond au framebuffer"
fi

# 4. CPU surcharg√©
CPU_LOAD=$(uptime | awk -F'load average:' '{ print $2 }' | cut -d',' -f1 | xargs)
if (( $(echo "$CPU_LOAD > 2.0" | bc -l 2>/dev/null || echo 0) )); then
    echo "‚ùó CPU: Charge √©lev√©e d√©tect√©e ($CPU_LOAD)"
fi

# 5. M√©moire insuffisante
FREE_MEM=$(free | grep "Mem:" | awk '{printf "%.1f", $7/$2 * 100.0}')
if (( $(echo "$FREE_MEM < 20.0" | bc -l 2>/dev/null || echo 0) )); then
    echo "‚ùó M√©moire: Moins de 20% libre"
fi

echo

# ============================================================================
# 8. COMMANDES DE TEST RAPIDE
# ============================================================================

echo "üß™ COMMANDES DE TEST RAPIDE:"
echo
echo "# Test performance FFmpeg (10 secondes):"
echo "timeout 10 ffmpeg -i $TEST_VIDEO -f null - 2>&1 | tail -1"
echo
echo "# Test avec acc√©l√©ration mat√©rielle:"
if [ $V4L2_DEVICES -gt 0 ]; then
    echo "timeout 10 ffmpeg -hwaccel v4l2m2m -c:v h264_v4l2m2m -i $TEST_VIDEO -f null -"
fi
echo
echo "# Monitoring CPU en temps r√©el:"
echo "top -p \$(pgrep ffmpeg) -d 1"
echo

echo "‚úÖ DIAGNOSTIC TERMIN√â"
echo "Utilisez les recommandations ci-dessus pour optimiser la performance vid√©o."