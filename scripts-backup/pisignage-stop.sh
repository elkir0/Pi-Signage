#!/bin/bash

# PiSignage v0.8.0 - Script d'arrÃªt principal
# ArrÃªt propre de tous les composants
# Auteur: Claude Code
# Date: 22/09/2025

set -e

# Variables
LOG_DIR="/opt/pisignage/logs"
PID_FILE="/tmp/pisignage.pid"
LOG_FILE="$LOG_DIR/pisignage.log"

# Fonction de logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# ArrÃªt de VLC
stop_vlc() {
    log "ArrÃªt de VLC..."

    # Via script de contrÃ´le
    if [ -x "/opt/pisignage/scripts/vlc-control.sh" ]; then
        "/opt/pisignage/scripts/vlc-control.sh" stop
    fi

    # Nettoyage des processus VLC restants
    for pid_file in "/tmp/vlc-pisignage.pid" "/tmp/vlc-playlist.pid"; do
        if [ -f "$pid_file" ]; then
            local pid=$(cat "$pid_file")
            if kill -0 "$pid" 2>/dev/null; then
                log "ArrÃªt VLC PID: $pid"
                kill "$pid" 2>/dev/null || true
                sleep 2
                if kill -0 "$pid" 2>/dev/null; then
                    kill -9 "$pid" 2>/dev/null || true
                fi
            fi
            rm -f "$pid_file"
        fi
    done

    # Force kill de tous les processus VLC
    pkill -f vlc 2>/dev/null || true

    log "âœ… VLC arrÃªtÃ©"
}

# ArrÃªt de feh (si utilisÃ© pour images)
stop_feh() {
    if [ -f "/tmp/feh-pisignage.pid" ]; then
        local pid=$(cat "/tmp/feh-pisignage.pid")
        if kill -0 "$pid" 2>/dev/null; then
            log "ArrÃªt feh PID: $pid"
            kill "$pid" 2>/dev/null || true
        fi
        rm -f "/tmp/feh-pisignage.pid"
    fi

    pkill -f feh 2>/dev/null || true
    log "âœ… feh arrÃªtÃ©"
}

# ArrÃªt du monitoring
stop_monitoring() {
    if [ -f "/tmp/pisignage-monitor.pid" ]; then
        local pid=$(cat "/tmp/pisignage-monitor.pid")
        if kill -0 "$pid" 2>/dev/null; then
            log "ArrÃªt monitoring PID: $pid"
            kill "$pid" 2>/dev/null || true
        fi
        rm -f "/tmp/pisignage-monitor.pid"
    fi

    log "âœ… Monitoring arrÃªtÃ©"
}

# ArrÃªt d'unclutter (curseur masquÃ©)
stop_unclutter() {
    pkill -f unclutter 2>/dev/null || true
    log "âœ… unclutter arrÃªtÃ©"
}

# Nettoyage des fichiers temporaires
cleanup_temp_files() {
    log "Nettoyage des fichiers temporaires..."

    # Suppression des PID files
    rm -f "/tmp/vlc-pisignage.pid"
    rm -f "/tmp/vlc-playlist.pid"
    rm -f "/tmp/feh-pisignage.pid"
    rm -f "/tmp/pisignage-monitor.pid"
    rm -f "$PID_FILE"

    # Nettoyage des sockets temporaires
    rm -f "/tmp/.pisignage-*" 2>/dev/null || true

    log "âœ… Fichiers temporaires nettoyÃ©s"
}

# RÃ©activation de l'Ã©conomiseur d'Ã©cran
restore_display() {
    log "Restauration des paramÃ¨tres d'affichage..."

    if [ -n "$DISPLAY" ] && xset q &>/dev/null; then
        # RÃ©activer l'Ã©conomiseur d'Ã©cran
        xset s on
        xset +dpms
        log "âœ… Ã‰conomiseur d'Ã©cran rÃ©activÃ©"
    fi
}

# Fonction principale
main() {
    log "ğŸ›‘ ArrÃªt de PiSignage v0.8.0..."

    stop_vlc
    stop_feh
    stop_monitoring
    stop_unclutter
    restore_display
    cleanup_temp_files

    log "âœ… PiSignage v0.8.0 arrÃªtÃ© avec succÃ¨s"
}

# ExÃ©cution
main "$@"