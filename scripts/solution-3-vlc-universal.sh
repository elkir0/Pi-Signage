#!/bin/bash

# SOLUTION 3: VLC Universal Player
# Bas√© sur recherche exhaustive - Compatibilit√© universelle
# Cible: 10-15% CPU fullscreen, tous formats support√©s

echo "üé≠ SOLUTION 3: VLC Universal Player"
echo "==================================="

VIDEO_FILE="${1:-/opt/pisignage/media/sintel.mp4}"
LOGFILE="/opt/pisignage/logs/vlc-universal.log"

# V√©rifications pr√©alables
if [ ! -f "$VIDEO_FILE" ]; then
    echo "‚ùå Erreur: Fichier vid√©o non trouv√©: $VIDEO_FILE"
    exit 1
fi

if ! command -v vlc > /dev/null; then
    echo "‚ùå Erreur: VLC non install√©"
    echo "üí° Installation: sudo apt install vlc"
    exit 1
fi

# Cr√©er le r√©pertoire de logs
mkdir -p "$(dirname "$LOGFILE")"

echo "üìÅ Fichier vid√©o: $VIDEO_FILE"
echo "üìù Logs: $LOGFILE"

# Tuer les processus existants
pkill -9 ffmpeg vlc mplayer mpv 2>/dev/null
sleep 1

# ============================================================================
# OPTIMISATIONS VLC BAS√âES SUR RECHERCHE
# ============================================================================

echo
echo "üîß OPTIMISATIONS VLC APPLIQU√âES:"
echo "   ‚úÖ Acc√©l√©ration mat√©rielle auto-d√©tection"
echo "   ‚úÖ Mode fullscreen (performance optimale)"
echo "   ‚úÖ D√©sactivation interface pour framebuffer"
echo "   ‚úÖ Cache optimis√© pour lecture fluide"
echo "   ‚úÖ D√©codage multi-thread√©"
echo "   ‚úÖ Boucle infinie"

# ============================================================================
# D√âTECTION ACC√âL√âRATION MAT√âRIELLE
# ============================================================================

echo
echo "üéØ D√âTECTION ACC√âL√âRATION MAT√âRIELLE VLC:"

VLC_VOUT=""
VLC_AVCODEC=""

# Test framebuffer direct (meilleure performance)
if [ -e /dev/fb0 ]; then
    echo "   üîç Test framebuffer direct..."
    if timeout 5 vlc --intf dummy --vout fb --fbdev /dev/fb0 --run-time 1 "$VIDEO_FILE" vlc://quit 2>/dev/null; then
        VLC_VOUT="fb"
        echo "   ‚úÖ Framebuffer direct disponible"
    else
        echo "   ‚ùå Framebuffer direct non fonctionnel"
    fi
fi

# Test VAAPI pour Intel/AMD
if [ -z "$VLC_VOUT" ] && [ -e /dev/dri/renderD128 ]; then
    echo "   üîç Test VAAPI..."
    # Note: VLC VAAPI n√©cessite souvent des configurations sp√©cifiques
    VLC_AVCODEC="vaapi"
    VLC_VOUT="gl"
    echo "   ‚ö° VAAPI configur√© (mode exp√©rimental)"
fi

# Test sortie X11 si disponible
if [ -z "$VLC_VOUT" ] && [ -n "$DISPLAY" ]; then
    echo "   üîç Test X11..."
    VLC_VOUT="x11"
    echo "   ‚úÖ X11 disponible"
fi

# Fallback: sortie dummy pour tests
if [ -z "$VLC_VOUT" ]; then
    VLC_VOUT="dummy"
    echo "   ‚ö†Ô∏è  Mode fallback (dummy output)"
fi

# ============================================================================
# COMMANDE VLC OPTIMIS√âE FINALE
# ============================================================================

echo
echo "üé¨ D√âMARRAGE VLC..."

# Options VLC optimis√©es bas√©es sur la recherche
VLC_OPTS=(
    "--intf" "dummy"                    # Interface minimale
    "--no-video-title-show"             # Pas de titre
    "--no-audio"                        # Pas d'audio pour signage
    "--fullscreen"                      # Mode plein √©cran (performance)
    "--no-osd"                          # Pas d'affichage √† l'√©cran
    "--no-spu"                          # Pas de sous-titres
    "--no-snapshot-preview"             # Pas d'aper√ßu screenshot
    "--no-stats"                        # Pas de statistiques
    "--avio-caching" "5000"             # Cache d'entr√©e 5s
    "--file-caching" "5000"             # Cache fichier 5s
    "--network-caching" "10000"         # Cache r√©seau 10s
    "--clock-jitter" "0"                # R√©duction jitter
    "--clock-synchro" "1"               # Synchro horloge
    "--threads" "0"                     # Auto-d√©tection threads
    "--loop"                            # Boucle infinie
)

# Ajouter les options de sortie vid√©o selon d√©tection
case "$VLC_VOUT" in
    "fb")
        VLC_OPTS+=("--vout" "fb")
        VLC_OPTS+=("--fbdev" "/dev/fb0")
        ;;
    "gl")
        VLC_OPTS+=("--vout" "gl")
        if [ -n "$VLC_AVCODEC" ]; then
            VLC_OPTS+=("--avcodec-hw" "$VLC_AVCODEC")
        fi
        ;;
    "x11")
        VLC_OPTS+=("--vout" "x11")
        ;;
    "dummy")
        VLC_OPTS+=("--vout" "dummy")
        echo "   ‚ö†Ô∏è  Mode test uniquement - pas d'affichage"
        ;;
esac

echo "Commande utilis√©e:"
echo "vlc ${VLC_OPTS[*]} \"$VIDEO_FILE\" vlc://quit"
echo

# D√©marrer VLC en arri√®re-plan avec redirection des logs
vlc "${VLC_OPTS[@]}" "$VIDEO_FILE" > "$LOGFILE" 2>&1 &
VLC_PID=$!

echo "‚úÖ VLC d√©marr√© (PID: $VLC_PID)"
echo

# ============================================================================
# MONITORING DE PERFORMANCE
# ============================================================================

echo "üìä MONITORING (30 secondes)..."
sleep 5

for i in {1..6}; do
    if ps -p $VLC_PID > /dev/null; then
        CPU_USAGE=$(ps -p $VLC_PID -o %cpu --no-headers 2>/dev/null | xargs)
        MEM_USAGE=$(ps -p $VLC_PID -o %mem --no-headers 2>/dev/null | xargs)
        
        echo "[$i/6] CPU: ${CPU_USAGE}% | MEM: ${MEM_USAGE}%"
        
        # VLC n'affiche pas toujours les FPS dans les logs standard
        # Mais on peut v√©rifier les erreurs/warnings
        if [ -f "$LOGFILE" ]; then
            ERROR_COUNT=$(grep -c "error\|warning" "$LOGFILE" 2>/dev/null || echo "0")
            echo "       Erreurs d√©tect√©es: $ERROR_COUNT"
        fi
    else
        echo "‚ùå Processus VLC arr√™t√© de mani√®re inattendue"
        break
    fi
    sleep 5
done

echo
echo "üéØ R√âSULTATS ATTENDUS:"
echo "   ‚Ä¢ Framerate: 24-60 FPS selon source"
echo "   ‚Ä¢ CPU usage: 10-15% fullscreen / 20-30% windowed"
echo "   ‚Ä¢ Compatibilit√©: Universelle (tous codecs)"
echo "   ‚Ä¢ Formats: H264, H265, MPEG, AVI, MKV, etc."
echo
echo "üìù Logs complets: $LOGFILE"
echo "‚èπÔ∏è  Pour arr√™ter: pkill -9 vlc"

# ============================================================================
# ALTERNATIVES ET OPTIMISATIONS AVANC√âES
# ============================================================================

echo
echo "‚öôÔ∏è  OPTIMISATIONS AVANC√âES DISPONIBLES:"
echo

# Configuration pour Raspberry Pi si d√©tect√©
if grep -q "Raspberry Pi" /proc/device-tree/model 2>/dev/null; then
    echo "ü•ß OPTIMISATIONS RASPBERRY PI:"
    echo "   Pour OMXPlayer (si 32-bit OS):"
    echo "   omxplayer --hw --loop \"$VIDEO_FILE\""
    echo
    echo "   Pour VLC avec MMAL:"
    echo "   vlc --vout mmal_xsplitter --fullscreen --loop \"$VIDEO_FILE\""
    echo
fi

# Configuration pour environnement de bureau
if [ -n "$DISPLAY" ]; then
    echo "üñ•Ô∏è  MODE BUREAU (si X11 disponible):"
    echo "   vlc --vout x11 --fullscreen --loop \"$VIDEO_FILE\""
    echo "   vlc --vout gl --fullscreen --loop \"$VIDEO_FILE\""
    echo
fi

# Options de d√©bogage
echo "üîç D√âBOGAGE AVANC√â:"
echo "   Mode verbose: vlc -vvv \"$VIDEO_FILE\""
echo "   Statistiques: vlc --extraintf stats \"$VIDEO_FILE\""
echo "   Modules disponibles: vlc --list"

echo
echo "üí° CONSEILS D'OPTIMISATION:"
echo "   1. Mode fullscreen = +50% performance"
echo "   2. D√©sactiver audio si non n√©cessaire"
echo "   3. Augmenter cache pour vid√©os r√©seau"
echo "   4. Utiliser H264 pour meilleure compatibilit√©"
echo "   5. √âviter les sous-titres si performance critique"

echo
echo "‚úÖ SOLUTION 3 D√âPLOY√âE - VLC Universal Player"