#!/usr/bin/env bash

# =============================================================================
# Pi Signage - Script de contrôle principal
# Version: 2.3.0
# Description: Gestion centralisée des services Pi Signage
# =============================================================================

set -euo pipefail

# Couleurs
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# Configuration
readonly CONFIG_FILE="/etc/pi-signage/config.conf"
readonly LOG_FILE="/var/log/pi-signage/control.log"
readonly DISPLAY_MODE_FILE="/etc/pi-signage/display-mode.conf"

# Charger la configuration si elle existe
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
fi

# Déterminer le mode d'affichage
DISPLAY_MODE="vlc"
if [[ -f "$DISPLAY_MODE_FILE" ]]; then
    DISPLAY_MODE=$(cat "$DISPLAY_MODE_FILE" 2>/dev/null || echo "vlc")
fi

# Services selon le mode
if [[ "$DISPLAY_MODE" == "chromium" ]]; then
    MAIN_SERVICE="chromium-kiosk.service"
else
    MAIN_SERVICE="vlc-signage.service"
fi

# Liste des services
SERVICES=(
    "$MAIN_SERVICE"
    "nginx.service"
    "php8.2-fpm.service"
    "glances.service"
    "pi-signage-watchdog.service"
)

# Logging
log_action() {
    local action="$1"
    local result="$2"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $action - $result" >> "$LOG_FILE"
}

# Afficher l'aide
show_help() {
    echo -e "${BLUE}Pi Signage - Contrôle des services${NC}"
    echo
    echo "Usage: $(basename "$0") [COMMANDE]"
    echo
    echo "Commandes disponibles:"
    echo "  status      Afficher l'état de tous les services"
    echo "  start       Démarrer tous les services"
    echo "  stop        Arrêter tous les services"
    echo "  restart     Redémarrer tous les services"
    echo "  emergency   Mode de récupération d'urgence"
    echo "  help        Afficher cette aide"
    echo
    echo "Mode actuel: $DISPLAY_MODE"
}

# Vérifier l'état d'un service
check_service_status() {
    local service="$1"
    if systemctl is-active --quiet "$service"; then
        echo -e "${GREEN}✓${NC} $service"
        return 0
    else
        echo -e "${RED}✗${NC} $service"
        return 1
    fi
}

# Afficher l'état de tous les services
show_status() {
    echo -e "${BLUE}=== État des services Pi Signage ===${NC}"
    echo
    
    local all_good=true
    for service in "${SERVICES[@]}"; do
        if ! check_service_status "$service"; then
            all_good=false
        fi
    done
    
    echo
    
    # Afficher aussi l'état du display manager si en mode VLC
    if [[ "$DISPLAY_MODE" == "vlc" ]]; then
        echo -e "${BLUE}Services supplémentaires (mode VLC):${NC}"
        check_service_status "lightdm.service"
    fi
    
    echo
    
    # Résumé
    if $all_good; then
        echo -e "${GREEN}✓ Tous les services sont actifs${NC}"
    else
        echo -e "${YELLOW}⚠ Certains services ne sont pas actifs${NC}"
    fi
    
    # Informations système
    echo
    echo -e "${BLUE}Informations système:${NC}"
    echo "• Uptime: $(uptime -p)"
    echo "• Charge: $(uptime | awk -F'load average:' '{print $2}')"
    echo "• Mémoire: $(free -h | awk '/^Mem:/ {print $3 " / " $2}')"
    
    # Température si disponible
    if command -v vcgencmd &> /dev/null; then
        temp=$(vcgencmd measure_temp | cut -d= -f2)
        echo "• Température: $temp"
    fi
}

# Démarrer tous les services
start_services() {
    echo -e "${BLUE}Démarrage des services Pi Signage...${NC}"
    
    # Si mode VLC, s'assurer que lightdm est démarré
    if [[ "$DISPLAY_MODE" == "vlc" ]] && ! systemctl is-active --quiet lightdm.service; then
        echo "Démarrage de lightdm..."
        systemctl start lightdm.service
        sleep 3
    fi
    
    for service in "${SERVICES[@]}"; do
        echo -n "Démarrage de $service... "
        if systemctl start "$service" 2>/dev/null; then
            echo -e "${GREEN}OK${NC}"
            log_action "START $service" "SUCCESS"
        else
            echo -e "${RED}ÉCHEC${NC}"
            log_action "START $service" "FAILED"
        fi
    done
    
    echo
    echo -e "${GREEN}✓ Services démarrés${NC}"
}

# Arrêter tous les services
stop_services() {
    echo -e "${BLUE}Arrêt des services Pi Signage...${NC}"
    
    for service in "${SERVICES[@]}"; do
        echo -n "Arrêt de $service... "
        if systemctl stop "$service" 2>/dev/null; then
            echo -e "${GREEN}OK${NC}"
            log_action "STOP $service" "SUCCESS"
        else
            echo -e "${YELLOW}IGNORÉ${NC}"
            log_action "STOP $service" "SKIPPED"
        fi
    done
    
    echo
    echo -e "${GREEN}✓ Services arrêtés${NC}"
}

# Redémarrer tous les services
restart_services() {
    echo -e "${BLUE}Redémarrage des services Pi Signage...${NC}"
    
    stop_services
    echo
    sleep 2
    start_services
}

# Mode de récupération d'urgence
emergency_mode() {
    echo -e "${RED}=== MODE DE RÉCUPÉRATION D'URGENCE ===${NC}"
    echo
    echo -e "${YELLOW}Ce mode va tenter de réparer les problèmes courants.${NC}"
    echo "Appuyez sur Ctrl+C pour annuler..."
    sleep 3
    
    # 1. Arrêter tous les services
    echo
    echo "1. Arrêt de tous les services..."
    stop_services
    
    # 2. Nettoyer les fichiers de lock/pid
    echo
    echo "2. Nettoyage des fichiers temporaires..."
    rm -f /var/run/vlc-signage.pid 2>/dev/null || true
    rm -f /tmp/.X0-lock 2>/dev/null || true
    
    # 3. Vérifier les permissions
    echo
    echo "3. Vérification des permissions..."
    if [[ -d /opt/videos ]]; then
        chown -R www-data:www-data /opt/videos
        chmod 755 /opt/videos
    fi
    
    if [[ -d /opt/scripts ]]; then
        chmod 755 /opt/scripts/*.sh 2>/dev/null || true
    fi
    
    # 4. Vérifier l'espace disque
    echo
    echo "4. Vérification de l'espace disque..."
    df -h / | tail -1
    
    # 5. Redémarrer les services essentiels
    echo
    echo "5. Redémarrage des services essentiels..."
    systemctl restart systemd-resolved 2>/dev/null || true
    systemctl restart networking 2>/dev/null || true
    
    # 6. Redémarrer les services Pi Signage
    echo
    echo "6. Redémarrage des services Pi Signage..."
    sleep 2
    start_services
    
    echo
    echo -e "${GREEN}✓ Récupération d'urgence terminée${NC}"
    echo
    echo "Si les problèmes persistent, exécutez:"
    echo "  sudo pi-signage-diag    # Pour un diagnostic complet"
    echo "  sudo pi-signage-repair  # Pour une réparation approfondie"
    
    log_action "EMERGENCY" "COMPLETED"
}

# Vérifier les privilèges root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}Erreur: Ce script doit être exécuté avec sudo${NC}"
        exit 1
    fi
}

# Créer le répertoire de logs si nécessaire
mkdir -p "$(dirname "$LOG_FILE")" 2>/dev/null || true

# Traitement des commandes
case "${1:-help}" in
    status)
        show_status
        ;;
    start)
        check_root
        start_services
        ;;
    stop)
        check_root
        stop_services
        ;;
    restart)
        check_root
        restart_services
        ;;
    emergency)
        check_root
        emergency_mode
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Commande inconnue: $1${NC}"
        echo
        show_help
        exit 1
        ;;
esac