#!/usr/bin/expect -f

set timeout 120
set host "192.168.1.103"
set user "pi"
set password "palmer00"

puts "Deploying PiSignage Web Interface..."

spawn ssh $user@$host

expect {
    "password:" { send "$password\r" }
    "yes/no" { 
        send "yes\r"
        expect "password:"
        send "$password\r"
    }
}

expect "$ "

# Create the PHP interface
puts "Creating web interface..."
send "sudo tee /var/www/pisignage/index.php > /dev/null << 'PHP_END'\r"
send "<?php\n\r"
send "// PiSignage Web Interface v3.1.0\n\r"
send "error_reporting(E_ALL);\n\r"
send "ini_set('display_errors', 1);\n\r"
send "\n\r"
send "define('MEDIA_DIR', '/opt/pisignage/media/');\n\r"
send "define('CONTROL_SCRIPT', '/opt/pisignage/scripts/vlc-control.sh');\n\r"
send "\n\r"
send "function executeCommand(\\\$command) {\n\r"
send "    return shell_exec(\\\$command . ' 2>&1');\n\r"
send "}\n\r"
send "\n\r"
send "function getSystemInfo() {\n\r"
send "    \\\$info = array();\n\r"
send "    \\\$info\['hostname'\] = trim(executeCommand('hostname'));\n\r"
send "    \\\$temp = executeCommand('cat /sys/class/thermal/thermal_zone0/temp');\n\r"
send "    \\\$info\['cpu_temp'\] = \\\$temp ? round(intval(\\\$temp) / 1000, 1) : 0;\n\r"
send "    \\\$memory = executeCommand('free -m | grep Mem');\n\r"
send "    if (preg_match('/Mem:\\\\s+(\\\\d+)\\\\s+(\\\\d+)/', \\\$memory, \\\$matches)) {\n\r"
send "        \\\$info\['mem_percent'\] = round((\\\$matches\[2\] / \\\$matches\[1\]) * 100);\n\r"
send "    } else {\n\r"
send "        \\\$info\['mem_percent'\] = 0;\n\r"
send "    }\n\r"
send "    \\\$vlc_check = executeCommand('pgrep vlc');\n\r"
send "    \\\$info\['vlc_running'\] = !empty(trim(\\\$vlc_check));\n\r"
send "    return \\\$info;\n\r"
send "}\n\r"
send "\n\r"
send "// Handle API requests\n\r"
send "if (isset(\\\$_GET\['action'\])) {\n\r"
send "    header('Content-Type: application/json');\n\r"
send "    switch (\\\$_GET\['action'\]) {\n\r"
send "        case 'status':\n\r"
send "            echo json_encode(\['success' => true, 'data' => getSystemInfo()\]);\n\r"
send "            break;\n\r"
send "        case 'play':\n\r"
send "            \\\$cmd = 'sudo -u pi ' . CONTROL_SCRIPT . ' play';\n\r"
send "            executeCommand(\\\$cmd);\n\r"
send "            echo json_encode(\['success' => true, 'message' => 'Playing video'\]);\n\r"
send "            break;\n\r"
send "        case 'stop':\n\r"
send "            \\\$cmd = 'sudo -u pi ' . CONTROL_SCRIPT . ' stop';\n\r"
send "            executeCommand(\\\$cmd);\n\r"
send "            echo json_encode(\['success' => true, 'message' => 'Stopped'\]);\n\r"
send "            break;\n\r"
send "        default:\n\r"
send "            echo json_encode(\['success' => false, 'message' => 'Unknown action'\]);\n\r"
send "    }\n\r"
send "    exit;\n\r"
send "}\n\r"
send "\n\r"
send "\\\$systemInfo = getSystemInfo();\n\r"
send "?>\n\r"
send "<!DOCTYPE html>\n\r"
send "<html>\n\r"
send "<head>\n\r"
send "    <meta charset=\"UTF-8\">\n\r"
send "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\r"
send "    <title>PiSignage Control Panel</title>\n\r"
send "    <style>\n\r"
send "        * { margin: 0; padding: 0; box-sizing: border-box; }\n\r"
send "        body {\n\r"
send "            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n\r"
send "            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n\r"
send "            min-height: 100vh;\n\r"
send "            padding: 20px;\n\r"
send "        }\n\r"
send "        .container { max-width: 1200px; margin: 0 auto; }\n\r"
send "        .header {\n\r"
send "            background: white;\n\r"
send "            border-radius: 12px;\n\r"
send "            padding: 30px;\n\r"
send "            margin-bottom: 20px;\n\r"
send "            box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n\r"
send "        }\n\r"
send "        h1 { color: #333; font-size: 2.5em; margin-bottom: 10px; }\n\r"
send "        .status {\n\r"
send "            display: grid;\n\r"
send "            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n\r"
send "            gap: 15px;\n\r"
send "            margin: 20px 0;\n\r"
send "        }\n\r"
send "        .stat {\n\r"
send "            background: #f8f9fa;\n\r"
send "            padding: 15px;\n\r"
send "            border-radius: 8px;\n\r"
send "            border-left: 4px solid #667eea;\n\r"
send "        }\n\r"
send "        .stat h3 {\n\r"
send "            color: #666;\n\r"
send "            font-size: 0.9em;\n\r"
send "            margin-bottom: 5px;\n\r"
send "        }\n\r"
send "        .stat p {\n\r"
send "            color: #333;\n\r"
send "            font-size: 1.5em;\n\r"
send "            font-weight: bold;\n\r"
send "        }\n\r"
send "        .controls {\n\r"
send "            background: white;\n\r"
send "            border-radius: 12px;\n\r"
send "            padding: 30px;\n\r"
send "            box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n\r"
send "        }\n\r"
send "        .btn {\n\r"
send "            background: #667eea;\n\r"
send "            color: white;\n\r"
send "            border: none;\n\r"
send "            padding: 12px 24px;\n\r"
send "            border-radius: 6px;\n\r"
send "            font-size: 1em;\n\r"
send "            cursor: pointer;\n\r"
send "            margin: 5px;\n\r"
send "            transition: all 0.3s;\n\r"
send "        }\n\r"
send "        .btn:hover {\n\r"
send "            background: #5a67d8;\n\r"
send "            transform: translateY(-2px);\n\r"
send "        }\n\r"
send "        .btn.danger { background: #ef4444; }\n\r"
send "        .btn.danger:hover { background: #dc2626; }\n\r"
send "        .btn.success { background: #10b981; }\n\r"
send "        .btn.success:hover { background: #059669; }\n\r"
send "        .status-indicator {\n\r"
send "            display: inline-block;\n\r"
send "            width: 12px;\n\r"
send "            height: 12px;\n\r"
send "            border-radius: 50%;\n\r"
send "            margin-right: 8px;\n\r"
send "            background: #ef4444;\n\r"
send "        }\n\r"
send "        .status-indicator.online { background: #10b981; }\n\r"
send "    </style>\n\r"
send "</head>\n\r"
send "<body>\n\r"
send "    <div class=\"container\">\n\r"
send "        <div class=\"header\">\n\r"
send "            <h1>🎬 PiSignage Control Panel</h1>\n\r"
send "            <p>Digital Signage Management System v3.1.0</p>\n\r"
send "            <div class=\"status\">\n\r"
send "                <div class=\"stat\">\n\r"
send "                    <h3>PLAYER STATUS</h3>\n\r"
send "                    <p>\n\r"
send "                        <span class=\"status-indicator <?php echo \\\$systemInfo\['vlc_running'\] ? 'online' : ''; ?>\"></span>\n\r"
send "                        <?php echo \\\$systemInfo\['vlc_running'\] ? 'Playing' : 'Stopped'; ?>\n\r"
send "                    </p>\n\r"
send "                </div>\n\r"
send "                <div class=\"stat\">\n\r"
send "                    <h3>CPU TEMPERATURE</h3>\n\r"
send "                    <p><?php echo \\\$systemInfo\['cpu_temp'\]; ?>°C</p>\n\r"
send "                </div>\n\r"
send "                <div class=\"stat\">\n\r"
send "                    <h3>MEMORY USAGE</h3>\n\r"
send "                    <p><?php echo \\\$systemInfo\['mem_percent'\]; ?>%</p>\n\r"
send "                </div>\n\r"
send "                <div class=\"stat\">\n\r"
send "                    <h3>HOSTNAME</h3>\n\r"
send "                    <p><?php echo htmlspecialchars(\\\$systemInfo\['hostname'\]); ?></p>\n\r"
send "                </div>\n\r"
send "            </div>\n\r"
send "        </div>\n\r"
send "        <div class=\"controls\">\n\r"
send "            <h2>🎮 Player Control</h2>\n\r"
send "            <div style=\"margin-top: 20px;\">\n\r"
send "                <button class=\"btn success\" onclick=\"playerAction('play')\">▶️ Play</button>\n\r"
send "                <button class=\"btn danger\" onclick=\"playerAction('stop')\">⏹️ Stop</button>\n\r"
send "                <button class=\"btn\" onclick=\"location.reload()\">🔄 Refresh</button>\n\r"
send "            </div>\n\r"
send "            <div id=\"message\" style=\"margin-top: 20px; padding: 10px; display: none;\"></div>\n\r"
send "        </div>\n\r"
send "    </div>\n\r"
send "    <script>\n\r"
send "        function playerAction(action) {\n\r"
send "            fetch('?action=' + action)\n\r"
send "            .then(response => response.json())\n\r"
send "            .then(data => {\n\r"
send "                const msg = document.getElementById('message');\n\r"
send "                msg.style.display = 'block';\n\r"
send "                msg.style.background = data.success ? '#d1fae5' : '#fee2e2';\n\r"
send "                msg.style.color = data.success ? '#065f46' : '#991b1b';\n\r"
send "                msg.innerHTML = data.message || 'Action completed';\n\r"
send "                setTimeout(() => location.reload(), 2000);\n\r"
send "            })\n\r"
send "            .catch(error => {\n\r"
send "                alert('Error: ' + error);\n\r"
send "            });\n\r"
send "        }\n\r"
send "        setInterval(() => {\n\r"
send "            fetch('?action=status')\n\r"
send "            .then(response => response.json())\n\r"
send "            .then(data => {\n\r"
send "                if (data.success) {\n\r"
send "                    console.log('Status updated:', data.data);\n\r"
send "                }\n\r"
send "            });\n\r"
send "        }, 10000);\n\r"
send "    </script>\n\r"
send "</body>\n\r"
send "</html>\n\r"
send "PHP_END\r"
expect "$ "

# Set permissions
send "sudo chown www-data:www-data /var/www/pisignage/index.php\r"
expect "$ "
send "sudo chmod 644 /var/www/pisignage/index.php\r"
expect "$ "

# Test PHP syntax
send "php -l /var/www/pisignage/index.php\r"
expect "$ "

# Restart services
send "sudo systemctl restart nginx php*-fpm\r"
expect "$ "

# Check if website is working
send "curl -s http://localhost/ | head -20\r"
expect "$ "

puts "\nWeb interface deployed!"
send "exit\r"
expect eof